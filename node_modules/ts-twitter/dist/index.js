"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var got_1 = __importDefault(require("got"));
var Twitter = /** @class */ (function () {
    function Twitter(client_id, client_secret, application_key, application_secret, access_token) {
        this._twitter_api = "https://api.twitter.com/1.1/";
        this._oauth2_url = "https://api.twitter.com/oauth2/token";
        if (!client_id)
            throw "Client_id must be defined";
        if (!client_secret)
            throw "client_secret must be defined";
        this.client_id = client_id;
        this.client_secret = client_secret;
        if (application_key)
            this.application_key = application_key;
        if (application_secret)
            this.application_secret = application_secret;
        if (access_token) {
            this.access_token = access_token;
        }
        else
            this.GetOAuthToken();
    }
    /**
     * Get any array of twwets based in an api call
     * You can pass query parameters ad the parameters argument
     * @param url
     * @param parameters
     */
    Twitter.prototype.getTweetsFromApi = function (url, parameters) {
        return __awaiter(this, void 0, void 0, function () {
            var body, content;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!!this.access_token) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.GetOAuthToken()];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2: return [4 /*yield*/, this.getFromApi(url, parameters)];
                    case 3:
                        body = _a.sent();
                        content = JSON.parse(body);
                        return [2 /*return*/, content];
                }
            });
        });
    };
    Twitter.prototype.getUserTimeline = function (parameters) {
        return __awaiter(this, void 0, void 0, function () {
            var body, content;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!!this.access_token) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.GetOAuthToken()];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2: return [4 /*yield*/, this.getFromApi("statuses/user_timeline", parameters)];
                    case 3:
                        body = _a.sent();
                        content = JSON.parse(body);
                        return [2 /*return*/, content];
                }
            });
        });
    };
    Twitter.prototype.getStatusesShow = function (parameters) {
        return __awaiter(this, void 0, void 0, function () {
            var body, content;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!!this.access_token) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.GetOAuthToken()];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2: return [4 /*yield*/, this.getFromApi("statuses/show", parameters)];
                    case 3:
                        body = _a.sent();
                        content = JSON.parse(body);
                        return [2 /*return*/, content];
                }
            });
        });
    };
    Twitter.prototype.getUsersLookup = function (parameters) {
        return __awaiter(this, void 0, void 0, function () {
            var body, content;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!!this.access_token) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.GetOAuthToken()];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2: return [4 /*yield*/, this.getFromApi("users/lookup", parameters)];
                    case 3:
                        body = _a.sent();
                        content = JSON.parse(body);
                        return [2 /*return*/, content];
                }
            });
        });
    };
    Twitter.prototype.getUser = function (parameters) {
        return __awaiter(this, void 0, void 0, function () {
            var body, content;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!!this.access_token) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.GetOAuthToken()];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2: return [4 /*yield*/, this.getFromApi("users/show", parameters)];
                    case 3:
                        body = _a.sent();
                        content = JSON.parse(body);
                        return [2 /*return*/, content];
                }
            });
        });
    };
    Twitter.prototype.searchTweets = function (parameters) {
        return __awaiter(this, void 0, void 0, function () {
            var url, body, content;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!!this.access_token) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.GetOAuthToken()];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2:
                        url = "search/tweets";
                        return [4 /*yield*/, this.getFromApi(url, parameters)];
                    case 3:
                        body = _a.sent();
                        content = JSON.parse(body);
                        return [2 /*return*/, content];
                }
            });
        });
    };
    Twitter.prototype.GetOAuthToken = function () {
        return __awaiter(this, void 0, void 0, function () {
            var userIdEncoded, postResult, err_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        userIdEncoded = Buffer.from(encodeURI(this.client_id) + ":" + encodeURI(this.client_secret)).toString("base64");
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, got_1.default.post("" + this._oauth2_url, {
                                headers: {
                                    Authorization: "Basic " + userIdEncoded,
                                    "Content-Type": "application/x-www-form-urlencoded"
                                },
                                body: "grant_type=client_credentials"
                            })];
                    case 2:
                        postResult = _a.sent();
                        this.access_token = JSON.parse(postResult.body).access_token;
                        return [2 /*return*/, this.access_token];
                    case 3:
                        err_1 = _a.sent();
                        throw err_1;
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    Twitter.prototype.getFromApi = function (url, parameters) {
        return __awaiter(this, void 0, void 0, function () {
            var result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, got_1.default.get("" + this._twitter_api + url + ".json", {
                            headers: { Authorization: "Bearer " + this.access_token },
                            query: parameters
                        })];
                    case 1:
                        result = _a.sent();
                        return [2 /*return*/, result.body];
                }
            });
        });
    };
    return Twitter;
}());
exports.Twitter = Twitter;
